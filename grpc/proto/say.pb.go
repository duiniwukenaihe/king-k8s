// Code generated by protoc-gen-go. DO NOT EDIT.
// source: say.proto

package k8s

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type SayRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SayRequest) Reset()         { *m = SayRequest{} }
func (m *SayRequest) String() string { return proto.CompactTextString(m) }
func (*SayRequest) ProtoMessage()    {}
func (*SayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dad255d0361606e, []int{0}
}

func (m *SayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SayRequest.Unmarshal(m, b)
}
func (m *SayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SayRequest.Marshal(b, m, deterministic)
}
func (m *SayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayRequest.Merge(m, src)
}
func (m *SayRequest) XXX_Size() int {
	return xxx_messageInfo_SayRequest.Size(m)
}
func (m *SayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SayRequest proto.InternalMessageInfo

func (m *SayRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type SayReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SayReply) Reset()         { *m = SayReply{} }
func (m *SayReply) String() string { return proto.CompactTextString(m) }
func (*SayReply) ProtoMessage()    {}
func (*SayReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dad255d0361606e, []int{1}
}

func (m *SayReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SayReply.Unmarshal(m, b)
}
func (m *SayReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SayReply.Marshal(b, m, deterministic)
}
func (m *SayReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayReply.Merge(m, src)
}
func (m *SayReply) XXX_Size() int {
	return xxx_messageInfo_SayReply.Size(m)
}
func (m *SayReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SayReply.DiscardUnknown(m)
}

var xxx_messageInfo_SayReply proto.InternalMessageInfo

func (m *SayReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*SayRequest)(nil), "k8s.SayRequest")
	proto.RegisterType((*SayReply)(nil), "k8s.SayReply")
}

func init() { proto.RegisterFile("say.proto", fileDescriptor_6dad255d0361606e) }

var fileDescriptor_6dad255d0361606e = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x4e, 0xac, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0xb6, 0x28, 0x56, 0x52, 0xe0, 0xe2, 0x0a, 0x4e,
	0xac, 0x0c, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d,
	0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x54, 0xb8, 0x38, 0xc0, 0x2a, 0x0a,
	0x72, 0x2a, 0x85, 0x24, 0xb8, 0xd8, 0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x61, 0x4a, 0x60, 0x5c,
	0x23, 0x13, 0x2e, 0x16, 0xd7, 0xe4, 0x8c, 0x7c, 0x21, 0x1d, 0xb0, 0x6a, 0x8f, 0xd4, 0x9c, 0x9c,
	0x7c, 0x21, 0x7e, 0xbd, 0x6c, 0x8b, 0x62, 0x3d, 0x84, 0xf1, 0x52, 0xbc, 0x08, 0x81, 0x82, 0x9c,
	0x4a, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x4b, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xca,
	0x4e, 0x87, 0x96, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayReply, error)
}

type echoClient struct {
	cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) SayHello(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayReply, error) {
	out := new(SayReply)
	err := c.cc.Invoke(ctx, "/k8s.Echo/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServer is the server API for Echo service.
type EchoServer interface {
	// Sends a greeting
	SayHello(context.Context, *SayRequest) (*SayReply, error)
}

// UnimplementedEchoServer can be embedded to have forward compatible implementations.
type UnimplementedEchoServer struct {
}

func (*UnimplementedEchoServer) SayHello(ctx context.Context, req *SayRequest) (*SayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8s.Echo/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).SayHello(ctx, req.(*SayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "k8s.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Echo_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "say.proto",
}
